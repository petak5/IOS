#!/bin/sh

export POSIXLY_CORRECT=yes

# find . -type f -not -path "*/\.*"
# also might add -prune
# alternative way using regex is:
# find . \( ! -regex '.*/\..*' \) -type f

# set line ending to let find in the foreach loop split files with spaces in name correctly
IFS=$'\n'

i=0
n=0

dirs=0
files=0

cat1=0
cat2=0
cat3=0
cat4=0
cat5=0
cat6=0
cat7=0
cat8=0
cat9=0

size1=100					# 100 	B
size2=1024					# 1		KiB
size3=$((1024 * 10))		# 10 	KiB
size4=$((1024 * 100))		# 100	KiB
size5=$((1024 * 1024))		# 1	MiB
size6=$((size5 * 10))		# 10	MiB
size7=$((size5 * 100))	# 100	MiB
size8=$((size5 * 1024))	# 1 GiB

path="$PWD"

usage()
{
	echo "Usage: $0 [-i FILE_ERE] [-n] [DIR]"
}

if [ "$#" -gt 4 ]; then
	usage
	exit 1
fi

while getopts 'i:n' OPTION; do
	case "$OPTION" in
		i)
			i=1
			ivalue="$OPTARG"
			;;
		n)
			n=1
			;;
		*)
			usage
			exit 1
			;;
	esac
done
shift $((OPTIND-1))

if [ "$i" -eq 1 ]; then
	if [ -z "$ivalue" ]; then
		usage
		exit 1
	fi
fi

if [ $# -eq 1 ]; then
	path="$1"
fi

# loop through folders
for line in $(find "$path" -type d 2>/dev/null); do

	# if `-i` is provided
	if [ $i -eq 1 ]; then
		# if some file is not matched by the regex, count the folder
		if [ 0 -lt "$(find "$line" -type f 2>>/dev/null | grep -c -q -v -E "$ivalue")" ]; then
			dirs=$((dirs + 1))
		fi
	else
		# if some file is not matched by the regex, count the folder
		if [ 0 -lt "$(find "$line" -type f 2>>/dev/null | wc -l)" ]; then
			dirs=$((dirs + 1))
		fi
	fi

done

for line in $(find "$path" -type f 2>>/dev/null); do

	if [ $i -eq 1 ]; then
		if basename "$line" | grep -q -E "$ivalue"; then
			continue
		fi
	fi

	size=$(wc -c "$line" | grep -o -E '[0-9]+' | head -1 | sed -e 's/^0\+//')

	files=$((files + 1))

	if [ "$size" -lt "$size1" ]; then
		cat1=$((cat1 + 1))
	elif [ "$size" -lt "$size2" ]; then
		cat2=$((cat2 + 1))
	elif [ "$size" -lt "$size3" ]; then
		cat3=$((cat3 + 1))
	elif [ "$size" -lt "$size4" ]; then
		cat4=$((cat4 + 1))
	elif [ "$size" -lt "$size5" ]; then
		cat5=$((cat5 + 1))
	elif [ "$size" -lt "$size6" ]; then
		cat6=$((cat6 + 1))
	elif [ "$size" -lt "$size7" ]; then
		cat7=$((cat7 + 1))
	elif [ "$size" -lt "$size8" ]; then
		cat8=$((cat8 + 1))
	else
		cat9=$((cat9 + 1))
	fi
done

if [ $i -eq 1 ]; then
	if [ $files -eq 0 ]; then
		echo "FILE_ERE cannot ignore all files." 1>2
		exit 1
	fi
fi

echo "Root directory: $path"
echo "Directories: $dirs"
echo "All files: $files"
echo "File size histogram:"

max="$cat1"
if [ "$cat2" -gt "$max" ]; then
	max="$cat2"
fi
if [ "$cat3" -gt "$max" ]; then
	max="$cat3"
fi
if [ "$cat4" -gt "$max" ]; then
	max="$cat4"
fi
if [ "$cat5" -gt "$max" ]; then
	max="$cat5"
fi
if [ "$cat6" -gt "$max" ]; then
	max="$cat6"
fi
if [ "$cat7" -gt "$max" ]; then
	max="$cat7"
fi
if [ "$cat8" -gt "$max" ]; then
	max="$cat8"
fi
if [ "$cat9" -gt "$max" ]; then
	max="$cat9"
fi

LINE_LENGTH=79
if [ -t 1 ]; then
	LINE_LENGTH=$(tput cols)
fi
LINE_LENGTH=$((LINE_LENGTH - 12))

ratio=1
if [ $n -eq 1 ]; then
	if [ $max -eq 0 ]; then
		ratio=1
	else
		ratio=$(echo "$LINE_LENGTH / $max" | bc -l)
	fi
fi

printf "  <100 B  : "
for i in $(seq 1 1 "$x" 2>/dev/null); do
	printf "#"
done
printf "\n  <1 KiB  : "
x=$(echo "scale=0; $cat2 * $ratio" | bc)
for i in $(seq 1 1 "$x" 2>/dev/null); do
	printf "#"
done
printf "\n  <10 KiB : "
x=$(echo "scale=0; $cat3 * $ratio" | bc)
for i in $(seq 1 1 "$x" 2>/dev/null); do
	printf "#"
done
printf "\n  <100 KiB: "
x=$(echo "scale=0; $cat4*$ratio" | bc)
for i in $(seq 1 1 "$x" 2>/dev/null); do
	printf "#"
done
printf "\n  <1 MiB  : "
x=$(echo "scale=0; $cat5*$ratio" | bc)
for i in $(seq 1 1 "$x" 2>/dev/null); do
	printf "#"
done
printf "\n  <10 MiB : "
x=$(echo "scale=0; $cat6*$ratio" | bc)
for i in $(seq 1 1 "$x" 2>/dev/null); do
	printf "#"
done
printf "\n  <100 MiB: "
x=$(echo "scale=0; $cat7*$ratio" | bc)
for i in $(seq 1 1 "$x" 2>/dev/null); do
	printf "#"
done
printf "\n  <1 GiB  : "
x=$(echo "scale=0; $cat8*$ratio" | bc)
for i in $(seq 1 1 "$x" 2>/dev/null); do
	printf "#"
done
printf "\n  >=1 GiB : "
x=$(echo "scale=0; $cat9*$ratio" | bc)
for i in $(seq 1 1 "$x" 2>/dev/null); do
	printf "#"
done
printf "\n"